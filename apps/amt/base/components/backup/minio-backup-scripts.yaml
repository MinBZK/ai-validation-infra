apiVersion: v1
kind: ConfigMap
metadata:
  name: minio-backup-scripts
data:
  backup.sh: |
    #!/bin/bash

    # Source environment variables if the file exists
    if [ -f /var/lib/backup/backup.env ]; then
      source /var/lib/backup/backup.env
    else
      echo "Error: Environment file not found at /var/lib/backup/backup.env!"
      exit 1
    fi

    # Check for required environment variables
    for VAR in NAMESPACE MINIO_DEPLOYMENT AZURE_CONNECTION_STRING AZURE_CONTAINER_NAME; do
      if [ -z "${!VAR}" ]; then
        echo "Error: Required environment variable $VAR is not set!"
        exit 1
      fi
    done

    # Set variables
    DATE=$(date +%Y-%m-%d)
    AZURE_STORAGE_ACCOUNT=$(echo "$AZURE_CONNECTION_STRING" | grep -oP 'AccountName=\K[^;]+')
    BACKUP_NAME="${NAMESPACE}-${MINIO_DEPLOYMENT}-${DATE}.tar.gz"

    echo "Starting backup at $(date)"
    echo "Creating backup: $BACKUP_NAME"
    cd /data
    tar -czf /tmp/$BACKUP_NAME .

    echo "Uploading backup to Azure Blob Storage..."
    az storage blob upload \
      --connection-string "$AZURE_CONNECTION_STRING" \
      --container-name $AZURE_CONTAINER_NAME \
      --name $BACKUP_NAME \
      --file /tmp/$BACKUP_NAME

    rm /tmp/$BACKUP_NAME

    # Clean up old backups (older than 5 days)
    RETENTION_DAYS=5
    CUTOFF_DATE=$(date -d "$RETENTION_DAYS days ago" +%Y-%m-%d)
    BACKUP_PREFIX="${NAMESPACE}-${MINIO_DEPLOYMENT}-"

    echo "Cleaning up backups older than $CUTOFF_DATE"
    BLOBS=$(az storage blob list \
      --connection-string "$AZURE_CONNECTION_STRING" \
      --container-name $AZURE_CONTAINER_NAME \
      --prefix $BACKUP_PREFIX \
      --output tsv --query "[].name")

    for BLOB in $BLOBS; do
      BLOB_DATE=$(echo $BLOB | grep -oP "\d{4}-\d{2}-\d{2}")
      if [[ -z "$BLOB_DATE" ]]; then
        echo "Warning: Could not extract date from blob: $BLOB - skipping"
        continue
      fi

      # Convert both dates to timestamps for reliable comparison
      BLOB_TIMESTAMP=$(date -d "$BLOB_DATE" +%s 2>/dev/null)
      CUTOFF_TIMESTAMP=$(date -d "$CUTOFF_DATE" +%s 2>/dev/null)

      if [[ -z "$BLOB_TIMESTAMP" || -z "$CUTOFF_TIMESTAMP" ]]; then
        echo "Warning: Invalid date format for blob: $BLOB - skipping"
        continue
      fi

      if [[ $BLOB_TIMESTAMP -lt $CUTOFF_TIMESTAMP ]]; then
        echo "Deleting old backup: $BLOB (date: $BLOB_DATE)"
        az storage blob delete \
          --connection-string "$AZURE_CONNECTION_STRING" \
          --container-name $AZURE_CONTAINER_NAME \
          --name $BLOB
      else
        echo "Keeping backup: $BLOB (date: $BLOB_DATE)"
      fi
    done

    echo "Backup process completed successfully at $(date)"

  restore.sh: |
    #!/bin/bash

    BACKUP_PREFIX="${NAMESPACE}-${MINIO_DEPLOYMENT}-"

    list_backups() {
      echo "Available backups in Azure storage:"
      az storage blob list \
        --connection-string "$AZURE_CONNECTION_STRING" \
        --container-name $AZURE_CONTAINER_NAME \
        --prefix $BACKUP_PREFIX \
        --output tsv --query "[].name" | sort -r
    }

    if [ $# -eq 0 ]; then
      echo "Usage: $0 <backup-name>"
      echo "Example: $0 ${BACKUP_PREFIX}2025-04-11.tar.gz"
      echo ""
      list_backups
      exit 1
    fi

    BACKUP_NAME=$1
    TARGET_DIR="/data"
    TEMP_DIR="/tmp/minio-restore"

    # Check if the blob exists
    if ! az storage blob exists \
         --connection-string "$AZURE_CONNECTION_STRING" \
         --container-name $AZURE_CONTAINER_NAME \
         --name "$BACKUP_NAME" \
         --query "exists" -o tsv | grep -q "True"; then
      echo "Error: Backup '$BACKUP_NAME' not found in Azure storage!"
      list_backups
      exit 1
    fi

    # Check if data directory is empty
    if [ "$(ls -A $TARGET_DIR)" ]; then
      echo "Warning: The data directory ($TARGET_DIR) is not empty."
      read -p "Proceeding will overwrite existing data. Continue? (y/N): " confirm
      if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        echo "Restore operation cancelled."
        exit 0
      fi
    fi

    # Create temp directory
    mkdir -p $TEMP_DIR

    echo "Downloading backup '$BACKUP_NAME' from Azure Blob Storage..."
    az storage blob download \
      --connection-string "$AZURE_CONNECTION_STRING" \
      --container-name $AZURE_CONTAINER_NAME \
      --name "$BACKUP_NAME" \
      --file "$TEMP_DIR/$BACKUP_NAME" \
      --no-progress

    echo "Extracting backup to data directory..."
    tar -xzf "$TEMP_DIR/$BACKUP_NAME" -C $TARGET_DIR

    # Cleanup
    rm -rf $TEMP_DIR

    echo "Restore completed successfully at $(date)"
    echo "Note: You may need to restart your MinIO server for changes to take effect."

  startup.sh: |
    #!/bin/bash

    export DEBIAN_FRONTEND=noninteractive
    echo "Setting up automatic backups to Azure..."
    apt-get update && apt-get install -y \
    curl \
    cron

    # Install Azure CLI
    curl -sL https://aka.ms/InstallAzureCLIDeb | bash

    # Create directory for environment file if it doesn't exist
    mkdir -p /var/lib/backup

    # Export all relevant environment variables to a file with more explicit patterns
    echo "Saving environment variables to /var/lib/backup/backup.env"
    env | grep -E '^(NAMESPACE|MINIO_DEPLOYMENT|AZURE_CONNECTION_STRING|AZURE_CONTAINER_NAME)=' | sed 's/=\(.*\)/="\1"/' > /var/lib/backup/backup.env

    # Verify that all required variables are captured
    for VAR in NAMESPACE MINIO_DEPLOYMENT AZURE_CONNECTION_STRING AZURE_CONTAINER_NAME; do
      if ! grep -q "^$VAR=" /var/lib/backup/backup.env; then
        echo "Error: Required environment variable $VAR is not found in the environment!"
        exit 1
      fi
    done

    echo "Setting up backup cronjob to run at 2 AM daily..."
    echo "0 2 * * * /bin/bash -c 'source /var/lib/backup/backup.env && /scripts/backup.sh' 2>&1 | tee -a /proc/1/fd/1" | crontab -

    echo "Backup configuration completed. Daily backups will run at 2 AM."
    echo "To restore a backup, run: /scripts/restore.sh <backup-name>"
    cron -f
